Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

Methods pop, top and getMin operations will always be called on non-empty stacks.

--------------------------------------------------------------------------------

class MinStack {
    Stack<Integer> s;
    List<Integer> list;
    /** initialize your data structure here. */
    public MinStack() {
        s = new Stack<>();
        list = new ArrayList<Integer>();
    }
    
    public void push(int x) {
        list.add(x);
        Collections.sort(list);
        s.push(x);
    }
    
    public void pop() {
        if(s.peek() == list.get(0)){
            list.remove(s.peek());
            Collections.sort(list);
            s.pop();
        }
        else{
            list.remove(s.pop());
            Collections.sort(list);
        }
    }
    
    public int top() {
        if(s.empty()){
            return -1;
        }
        return s.peek();
    }
    
    public int getMin() {
        return list.get(0);
    }
}
