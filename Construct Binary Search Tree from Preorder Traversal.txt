Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, 
any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  
Also recall that a preorder traversal displays the value of the node first, then traverses node.left, 
then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree 
with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

 

Constraints:

1 <= preorder.length <= 100
1 <= preorder[i] <= 10^8
The values of preorder are distinct.

---------------------------------------------------------------------------------------------------------------

class Solution {
    int inc = 0;
    public TreeNode bstFromPreorder(int[] arr) {
        int[] in = new int[arr.length];
        for(int i = 0; i<arr.length; i++){
            in[i] = arr[i];
        }
        Arrays.sort(in);
        return insert(arr, in, 0, in.length-1);
        //return root;
    }
    
    public TreeNode insert( int[] arr, int[] in, int s, int e){
        if(inc >= arr.length || s > e) {
            //--inc;
            return null;
        }
    
       
        System.out.println("start-> "+s+" ending-> "+e+" root-> "+inc);
        
        TreeNode root = new TreeNode(arr[inc]);
        int newRootIdex = 0;
        for(int i = s; i <=e; i++){
            if(in[i] == root.val){
               newRootIdex = i;
            }
        }
        inc++;
        
        root.left = insert(arr, in, s, newRootIdex-1);
        root.right = insert( arr, in, newRootIdex+1, e);
        return root;
    }
}